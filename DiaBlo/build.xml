<project name="diablo" default="all" basedir=".">

	<property name="src" location="src"/>
	<property name="bin" location="bin"/>
	<property name="bin.instrumented" location="bin/instrumented"/>
	<property name="bin.classes" location="bin/classes"/>
	<property name="dist" location="dist"/>
	<property name="doc"  location="doc"/>
	<property name="doc.javadoc"  location="doc/javadoc"/>
	<property name="doc.coverage"  location="doc/coverage"/>
	<property name="lib"  location="lib"/>
	<property name="acceptanceTests"  location="${src}/br/ufal/lamp/diablo/tests/acceptance"/>
	<property name="unitTests"  location="${bin}/br.ufal.lamp.diablo.tests.unit"/>

	<path id="classpath.base">
		<pathelement location="${unitTests}"/>
		<pathelement location="${lib}/junit.jar"/>
		<pathelement location="${lib}/cobertura.jar"/>
		<pathelement location="${lib}/jhotdraw.jar" />
	</path>
	
	<path id="external-jars">
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<target name="limpa">
		<delete includeemptydirs="true">
			<fileset dir="${bin}" includes="**/*"/>
			<fileset dir="${dist}" includes="**/*"/>
			<fileset dir="${doc.coverage}" includes="**/*"/>
		</delete>
	</target>

	<target name="compila" depends="limpa">
		<mkdir dir="${bin.classes}" />
		<javac srcdir="${src}" destdir="${bin.classes}" debug="true">
			<classpath refid="external-jars"/>
		</javac>
		<copy todir="${bin.classes}">
			<fileset dir="${src}" excludes="**/*.java"/>
			<fileset dir="${src}" excludes="**/*.conf"/>
		</copy>
	</target>
		
	<target name="doc" depends="compila">
		<delete includeemptydirs="true">
			<fileset dir="${doc.javadoc}" includes="**/*"/>
		</delete>
		<javadoc 
			destdir="${doc.javadoc}" 
			private="true"
			sourcepath="${src}" 
			windowtitle="Projeto Diablo"
			classpath="${bin};${lib}/easyaccept.jar;${lib}/junit.jar"
			packagenames="br.ufal.lamp.diablo.*"
		>
		<group title="Núcleo do sistema" packages="br.ufal.lamp.diablo.core"/>
		<group title="Exceções do sistema" packages="br.ufal.lamp.diablo.exception"/>
		<group title="Testes de unidade criados para o projeto DiaBlo utilizando (JUnit)" packages="br.ufal.lamp.diablo.tests.unit"/>
		<group title="Utilidades do sistema" packages="br.ufal.lamp.diablo.utils"/>
		<group title="Interface Console" packages="br.ufal.lamp.diablo.console"/>
		<group title="Interface GUI" packages="br.ufal.lamp.diablo.gui"/>
		</javadoc>
	</target>

	<target name="teste-aceitacao" depends="compila">
		<java classname="easyaccept.EasyAccept">
			<classpath>
				<fileset dir="${lib}">
					<include name="*.jar"/>
				</fileset>
				<pathelement path="${bin.classes}"/>
			</classpath>
			<arg value="br.ufal.lamp.diablo.core.DiabloFacade"/>
			<arg value="${acceptanceTests}/us1.txt"/>
			<arg value="${acceptanceTests}/us2.txt"/>
			<arg value="${acceptanceTests}/us3.txt"/>
		</java>
	</target>
	
	<path id="cobertura.classpath"> 
        <fileset dir="${lib}"> 
            <include name="cobertura.jar" /> 
            <include name="asm-2.1.jar" /> 
    		<include name="javancss.jar" />
    		<include name="ccl.jar" />
            <include name="log4j-1.2.9.jar" /> 
        </fileset> 
        <fileset file="${lib}/jakarta-oro-2.0.8.jar" /> 
    </path> 
	        
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
		
	<target name="testes-cobertura-relatorio" depends="compila"	description="Executa todos os testes de cobertura.">
		<delete file="${basedir}/cobertura.ser" />
		<!-- Cria 'instrument' sobre os códigos. -->
		<cobertura-instrument todir="${bin.instrumented}">
		    <fileset dir="${bin.classes}">
		        <include name="**/*.class" />
		    	<exclude name="**/*Test*.class" />
				<!--<exclude name="ufal/code/**/*.class" />-->
		    </fileset>
		</cobertura-instrument>
		<!-- Executa testes unitários. -->
		<java fork="yes" classname="junit.textui.TestRunner" taskname="unit" failonerror="true">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />
			<classpath location="${bin.instrumented}" />
			<classpath location="${bin.classes}" />
			<classpath refid="classpath.base" />
			<arg line="br.ufal.lamp.diablo.tests.unit.AllTests"/>
		</java>
		<!-- Cria relatório com os resultados de todos os testes de cobertura. -->
		<cobertura-report destdir="${doc.coverage}">
			<fileset dir="${src}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
	</target>

	<target name="createCupJLex" description="Generates JMParser(cup), JMSymbols(cup) and JMScanner(jlex) code">
			<delete file="${src}/br/ufal/lamp/diablo/core/gerador/JMScanner.java"/>
			<delete file="${src}/br/ufal/lamp/diablo/core/gerador/JMParser.java"/>
			<delete file="${src}/br/ufal/lamp/diablo/core/gerador/JMSymbols.java"/>

			<java classname="java_cup.Main">
				<arg line="-parser JMParser -symbols JMSymbols ${src}/br/ufal/lamp/diablo/core/gerador/cparser.cup"/>
				<classpath refid="project.classpath"/>
			</java>
			<java classname="JLex.Main">
				<arg line="${src}/br/ufal/lamp/diablo/core/gerador/cscanner.lex"/>
				<classpath refid="project.classpath"/>
			</java>

			<move file="JMParser.java" tofile="${src}/br/ufal/lamp/diablo/core/gerador/CParser.java"/>
			<move file="JMSymbols.java" tofile="${src}/br/ufal/lamp/diablo/core/gerador/CSymbols.java"/>
			<move file="${src}/br/ufal/lamp/diablo/core/gerador/jmscanner.lex.java" tofile="${src}/br/ufal/lamp/diablo/core/gerador/CScanner.java"/>
	</target>
	
	<target name="unit" depends="compila">
		<java fork="yes" classname="junit.textui.TestRunner" taskname="unit" failonerror="true">
			<classpath>
				<pathelement location="${lib}/junit.jar"/>
				<pathelement location="${lib}/jhotdraw.jar"/>
				<pathelement location="${bin.classes}"/>
			</classpath>
			<arg line="br.ufal.lamp.diablo.tests.unit.AllTests"/>
		</java>
		<delete includeemptydirs="true">
			<fileset dir="${bin}" includes="**/*"/>
			<fileset dir="${dist}" includes="**/*"/>
			<fileset dir="${doc.coverage}" includes="**/*"/>
		</delete>
	</target>
	<target name="all" depends="teste-aceitacao,unit,doc,compila,limpa,createCupJLex">
	</target>

</project>